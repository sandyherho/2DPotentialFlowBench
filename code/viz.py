#!/usr/bin/env python

"""
2D Potential Flow Visualization
============================

This script creates visualizations for the 2D potential flow solution data
generated by the Laplace equation solver. It produces three types of plots:
1. 3D surface plot of the velocity potential field φ
2. 2D streamlines with pressure coefficient Cₚ contours
3. L₂ norm convergence history plot

Dependencies:
- NumPy: For data handling
- Matplotlib: For visualization
- Pandas: For data I/O

Author: Sandy H. S. Herho <sandy.herho@email.ucr.edu>
Date: 12/28/2024
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import os
plt.style.use("bmh")
#plt.style.use("seaborn-v0_8-whitegrid")

# Set global font sizes
plt.rcParams.update({
    'font.size': 16,
    'axes.labelsize': 20,
    'axes.titlesize': 22,
    'xtick.labelsize': 16,
    'ytick.labelsize': 16,
    'legend.fontsize': 16,
    'figure.titlesize': 24
})

def load_2d_array_from_csv(filename):
    """Load 2D array from CSV file"""
    return pd.read_csv(filename).values

def load_obstacles_from_csv():
    """Load obstacles information from CSV and convert to dictionary"""
    df = pd.read_csv('../outputs/data/obstacles.csv')
    obstacles = {
        'box_imin': [int(df[df['parameter'] == 'box_imin']['value_1'].iloc[0]),
                    int(df[df['parameter'] == 'box_imin']['value_2'].iloc[0])],
        'box_imax': [int(df[df['parameter'] == 'box_imax']['value_1'].iloc[0]),
                    int(df[df['parameter'] == 'box_imax']['value_2'].iloc[0])],
        'box_jmin': [int(df[df['parameter'] == 'box_jmin']['value_1'].iloc[0]),
                    int(df[df['parameter'] == 'box_jmin']['value_2'].iloc[0])],
        'box_jmax': [int(df[df['parameter'] == 'box_jmax']['value_1'].iloc[0]),
                    int(df[df['parameter'] == 'box_jmax']['value_2'].iloc[0])],
        'box_colors': [df[df['parameter'] == 'box_colors']['value_1'].iloc[0],
                      df[df['parameter'] == 'box_colors']['value_2'].iloc[0]]
    }
    return obstacles

def create_potential_surface_plot(X, Y, phi, obstacles):
    """Create 3D surface plot of the velocity potential field φ"""
    fig = plt.figure(figsize=(12, 10))
    ax = plt.axes(projection='3d')
    
    # Create mask for obstacles
    mask = np.zeros(phi.shape, dtype=bool)
    for bc in range(len(obstacles['box_imin'])):
        mask[obstacles['box_imin'][bc]:obstacles['box_imax'][bc],
             obstacles['box_jmin'][bc]:obstacles['box_jmax'][bc]] = True
    
    phi_masked = np.ma.array(phi, mask=mask)
    
    surf = ax.plot_surface(X, Y, -phi_masked, cmap='RdYlGn_r')
    
    # Labels
    ax.set_xlabel('$x$', fontsize=20)
    ax.set_ylabel('$y$', fontsize=20)
    ax.set_zlabel('$-\\phi(x,y)$', fontsize=20)
    
    cb = fig.colorbar(surf, ax=ax, shrink=0.9, location="right")
    cb.set_label('Negative Velocity Potential, $-\\phi(x,y)$', fontsize=22)
    
    plt.savefig('../outputs/figs/potential_surface.png', dpi=350, bbox_inches='tight')
    plt.close()

def create_streamline_pressure_plot(X, Y, U, V, Cp, obstacles, Lx, Ly, nx, ny):
    """Create streamline plot with pressure coefficient Cₚ contours"""
    fig, ax = plt.subplots(figsize=(14, 10))
    
    # Streamlines
    ax.streamplot(X[1:-2,1:-2], Y[1:-2,1:-2], U[1:-2,1:-2], V[1:-2,1:-2],
                 density=2.0, color='k', linewidth=0.5, arrowstyle='-',
                 broken_streamlines=False)
    
    # Pressure contours
    cs = ax.contourf(X[1:-1,1:-1], Y[1:-1,1:-1], Cp,
                    np.linspace(-1,1,41), cmap='RdYlGn_r', extend='both')
    
    # Labels
    ax.set_xlabel('$x$', fontsize=22)
    ax.set_ylabel('$y$', fontsize=22)
    cb = fig.colorbar(cs, ax=ax, shrink=0.9, location="bottom")
    cb.set_label('Pressure Coefficient, $C_p$', fontsize=20)
    
    # Add obstacles
    for bc in range(len(obstacles['box_imin'])):
        ax.add_patch(Rectangle(
            (Lx*obstacles['box_jmin'][bc]/(nx-1),
             Ly*obstacles['box_imin'][bc]/(ny-1)),
            Lx*(obstacles['box_jmax'][bc]-obstacles['box_jmin'][bc])/(nx-1),
            Ly*(obstacles['box_imax'][bc]-obstacles['box_imin'][bc])/(ny-1),
            zorder=10,
            edgecolor='k',
            facecolor=obstacles['box_colors'][bc],
            fill=True,
            lw=1
        ))
    
    ax.set_aspect('equal', adjustable='box')
    # plt.suptitle("Streamlines and $C_p$ Contours", fontsize=24)
    
    plt.savefig('../outputs/figs/streamlines_pressure.png', dpi=350, bbox_inches='tight')
    plt.close()

def create_convergence_plot(err):
    """Create L₂ norm convergence history plot"""
    fig, ax = plt.subplots(figsize=(12, 8))
    ax.plot(err, linewidth=2)
    plt.yscale("log")
    ax.set_ylabel('$L_2$ Norm', fontsize=22)
    ax.set_xlabel('Iteration Count', fontsize=22)
    #plt.suptitle("Convergence History", fontsize=24)
    
    plt.savefig('../outputs/figs/convergence.png', dpi=350, bbox_inches='tight')
    plt.close()

def visualize_results():
    """Load and visualize simulation results"""
    try:
        # Create output directory if it doesn't exist
        os.makedirs('../outputs/figs', exist_ok=True)
        
        # Load data
        X = load_2d_array_from_csv('../outputs/data/X.csv')
        Y = load_2d_array_from_csv('../outputs/data/Y.csv')
        phi = load_2d_array_from_csv('../outputs/data/phi.csv')
        U = load_2d_array_from_csv('../outputs/data/U.csv')
        V = load_2d_array_from_csv('../outputs/data/V.csv')
        Cp = load_2d_array_from_csv('../outputs/data/Cp.csv')
        err = load_2d_array_from_csv('../outputs/data/err.csv')
        obstacles = load_obstacles_from_csv()
        
        # Calculate domain parameters
        Lx, Ly = X.max(), Y.max()
        ny, nx = phi.shape
        
        # Create visualizations
        create_potential_surface_plot(X, Y, phi, obstacles)
        create_streamline_pressure_plot(X, Y, U, V, Cp, obstacles, Lx, Ly, nx, ny)
        create_convergence_plot(err)
        
        print("Visualization completed! Figures saved in ../outputs/figs/")
        
    except FileNotFoundError:
        print("Error: Could not find simulation results. Please run simulation.py first.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    visualize_results()
